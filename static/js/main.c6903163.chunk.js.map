{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","Counter","prevProps","prevState","console","log","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAkBeA,EAdA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACd,OACI,yBAAKC,UAAU,gCACX,uBAAGA,UAAU,gBAAb,UACQ,IACR,0BAAMA,UAAU,oCACbD,MCkDAE,E,2LAxDQC,EAAWC,GAE1BC,QAAQC,IAAI,YAAaH,GACzBE,QAAQC,IAAI,YAAaF,K,6CAKzBC,QAAQC,IAAI,uB,+BAqBN,IAAD,OAIL,OAHAD,QAAQC,IAAI,kBAIR,6BACA,0BAAOL,UAAWM,KAAKC,mBAAoBD,KAAKE,eAChD,4BAAQC,QAAS,kBAAM,EAAKC,MAAMC,YAAY,EAAKD,MAAME,UAAUZ,UAAU,4BAA7E,aACA,4BAAQS,QAAS,kBAAM,EAAKC,MAAMG,SAAS,EAAKH,MAAME,QAAQE,KAAKd,UAAU,6BAA7E,a,wCAKJ,IAAIe,EAAU,mBAEd,OADAA,GAAyC,IAA7BT,KAAKI,MAAME,QAAQI,MAAe,UAAY,Y,oCAKzD,IACWA,EAAUV,KAAKI,MAAME,QAArBI,MAER,OAAiB,IAAVA,EAAc,OAASA,M,GArDpBC,aCkBPC,E,iLAdD,IAAD,EAE2CZ,KAAKI,MAAjDS,EAFC,EAEDA,QAASC,EAFR,EAEQA,SAAUP,EAFlB,EAEkBA,SAAUF,EAF5B,EAE4BA,YAEjC,OAAQ,6BAEJ,4BAAQF,QAASU,EAASnB,UAAU,8BAApC,SACCoB,EAASC,KAAI,SAAAT,GAAO,OACtB,kBAAC,EAAD,CAASU,IAAKV,EAAQE,GAAID,SAAUA,EAAUF,YAAaA,EAAaC,QAASA,Y,GAXrEK,a,wOCuERM,E,YAxDd,aAAe,IAAD,8BACb,+CAZAC,MAAQ,CAENJ,SAAU,CACN,CAAEN,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,KAKT,EAUdS,gBAAkB,SAAAb,GACd,IAAMQ,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BM,EAAQN,EAASO,QAAQf,GAC/BQ,EAASM,G,yVAAT,IAAsBd,GACtBQ,EAASM,GAAOV,QAChB,EAAKY,SAAS,CAAER,cAfN,EAkBdS,YAAc,WACb,IAAMT,EAAU,EAAKI,MAAMJ,SAASC,KAAI,SAAAS,GAEjC,OADAA,EAAEd,MAAQ,EACHc,KAEX,EAAKF,SAAS,CAAER,cAvBN,EA0BfW,aAAe,SAACC,GAEb,IAAMZ,EAAW,EAAKI,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAEhB,KAAOkB,KAC1D,EAAKJ,SAAS,CAAER,cA3BjBhB,QAAQC,IAAI,qBAFC,E,iFAMZD,QAAQC,IAAI,mB,+BA6Bb,OAGE,kBAAC,IAAM6B,SAAP,KACE,kBAAC,EAAD,CAAQnC,cAAeO,KAAKkB,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAEd,MAAQ,KAAGmB,SACtE,0BAAMnC,UAAU,aAEd,kBAAC,EAAD,CACEoB,SAAUd,KAAKkB,MAAMJ,SACrBD,QAASb,KAAKuB,YACdlB,YAAaL,KAAKmB,gBAClBZ,SAAUP,KAAKyB,qB,GA3DLd,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c6903163.chunk.js","sourcesContent":["import React from 'react';\n\n//Stateless Functional Component \n\nconst NavBar = ({ totalCounters }) => {\n    return ( \n        <nav className=\"navbar navbar-light bg-light\">\n            <a className=\"navbar-brand\"   >\n            Navbar {\" \"}\n            <span className=\"badge badge-pill badge-secondary\">\n              {totalCounters}\n            </span>\n            </a>\n        </nav>\n     );\n};\n\n \nexport default NavBar;","import React, { Component } from 'react';\n\nclass Counter extends Component {\n\n    componentDidUpdate(prevProps, prevState) {\n\n        console.log(\"prevProps\", prevProps);\n        console.log(\"prevState\", prevState);\n    }\n\n    componentWillUnmount() {\n\n        console.log(\"Counter - Unmount\");\n\n\n    }\n\n  // constructor(){\n   //     super();\n   //  this.handleIncrement = this.handleIncrement.bind(this);\n  //  }\n\n\n  /* handleIncrement = () =>{ \n       this.setState({ value: this.state.value + 1 })\n    } \n*/\n   /* handleDecrement = product => {\n        this.setState({ count: this.state.count -1});\n    }*/\n\n   // <button onClick={ this.handleDecrement} className=\"btn btn-secondary btn-sm\">Decrement</button><br/>\n\n    render() { \n        console.log('App - Rendered'); \n      //  console.log(this.props);\n      // console.log('props', this.props);\n        return(\n            <div> \n            <span  className={this.getBadgeClasses()}>{this.formatCount()}</span>\n            <button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm\">Increment</button>  \n            <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button> \n         </div>     \n        );\n    }\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n        formatCount()\n        {\n            const { value } = this.props.counter;\n            \n            return value === 0 ? \"Zero\" : value;\n        }\n    \n}\n \nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter';\n\nclass Counters extends Component {\n    \n   \n    render() { \n\n    const { onReset, counters, onDelete, onIncrement} = this.props;  \n        \n        return (<div>\n\n            <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">Reset</button>\n           { counters.map(counter => (\n           <Counter key={counter.id} onDelete={onDelete} onIncrement={onIncrement} counter={counter} />\n            ))}\n        </div>  );\n    }\n}\n \nexport default Counters;","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters'\nimport './App.css';\n\nclass App extends Component {\n\n  state = { \n\n    counters: [\n        { id: 1, value: 4},\n        { id: 2, value: 0},\n        { id: 3, value: 0},\n        { id: 4, value: 0}\n    ]\n\n };\n\n constructor() {\n  super();\n  console.log('App - Constructor');\n }\n\n componentDidMount() {\n   console.log('App - Mounted');\n }\n\n\n handleIncrement = counter => {\n     const counters = [...this.state.counters];\n     const index = counters.indexOf(counter);\n     counters[index] = {...counter};\n     counters[index].value++;\n     this.setState({ counters });\n };\n\n handleReset = () => {\n  const counters= this.state.counters.map(c => {\n         c.value = 0;\n         return c;\n     });\n     this.setState({ counters });\n\n }\nhandleDelete = (counterId)  => \n{\n   const counters = this.state.counters.filter(c => c.id !== counterId);\n   this.setState({ counters });\n};\n\nrender(){\n\n  \n  return (\n\n    \n    <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length} />\n    <main className=\"container\">\n\n      <Counters \n        counters={this.state.counters}\n        onReset={this.handleReset}\n        onIncrement={this.handleIncrement}\n        onDelete={this.handleDelete}\n      />\n\n    </main>\n    </React.Fragment>\n        \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}